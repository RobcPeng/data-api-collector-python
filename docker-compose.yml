services:
  postgres:
    image: postgres:15
    container_name: data-api-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT_EXTERNAL:-5432}:${POSTGRES_PORT:-5432}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - app-network

  elasticsearch:
    image: elasticsearch:9.1.2
    container_name: data-api-elasticsearch
    user: "1000:1000"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elastic_data:/usr/share/elasticsearch/data
    networks:
      - app-network
    restart: unless-stopped

  neo4j:
    image: neo4j:community
    container_name: data-api-neo4j
    restart: unless-stopped
    ports:
      - "7474:7474" # HTTP Browser interface
      - "7687:7687" # Bolt protocol
    environment:
      # Authentication
      NEO4J_AUTH: ${NEO4J_USER}/${NEO4J_PASSWORD}

      # Memory settings
      NEO4J_dbms_memory_heap_initial__size: 512m
      NEO4J_dbms_memory_heap_max__size: 1G
      NEO4J_dbms_memory_pagecache_size: 512m

      # Security and plugins
      NEO4J_dbms_security_procedures_unrestricted: gds.*,apoc.*
      NEO4J_dbms_security_procedures_allowlist: gds.*,apoc.*
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'

      # Logging
      NEO4J_dbms_logs_debug_level: INFO

    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins

    networks:
      - app-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "cypher-shell -u neo4j -p ${NEO4J_PASSWORD} 'RETURN 1' || exit 1",
        ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  redis:
    image: redis:8.2.1
    container_name: data-api-redis
    ports:
      - "${REDIS_PORT_EXTERNAL:-6379}:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.10
    container_name: data-api-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    restart: unless-stopped
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.4.10
    container_name: data-api-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA_BOOTSTRAP_SERVERS}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    restart: unless-stopped
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - app-network

  app:
    build: .
    container_name: data-api-app
    depends_on:
      - postgres
      - redis
      - zookeeper
      - kafka
      - neo4j
    environment:
      POSTGRES_SERVER: ${POSTGRES_SERVER}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      API_V1_STR: ${API_V1_STR}
      PROJECT_NAME: ${PROJECT_NAME}
      DEBUG: ${DEBUG}
      SECRET_KEY: ${SECRET_KEY}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
      NEO4J_URI: ${NEO4J_URI}
      NEO4J_USER: ${NEO4J_USER}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      NEO4J_DATABASE: ${NEO4J_DATABASE}
      NEO4J_MAX_CONNECTION_LIFETIME: ${NEO4J_MAX_CONNECTION_LIFETIME}
      NEO4J_MAX_CONNECTION_POOL_SIZE: ${NEO4J_MAX_CONNECTION_POOL_SIZE}
      NEO4J_CONNECTION_TIMEOUT: ${NEO4J_CONNECTION_TIMEOUT}
      OLLAMA_BASE_URL: ${OLLAMA_BASE_URL}
      OLLAMA_API_KEY: ${OLLAMA_API_KEY}
      HF_HOME: /app/cache
      TRANSFORMERS_CACHE: /app/cache
      HF_HUB_CACHE: /app/cache
    restart: unless-stopped
    volumes:
      - ./huggingface_cache:/app/cache
    networks:
      - app-network
    expose:
      - "8000"

  caddy:
    image: caddy:2-alpine
    container_name: data-api-caddy
    restart: unless-stopped
    ports:
      - "${CADDY_HTTP_PORT:-8080}:80"
      - "${CADDY_HTTPS_PORT:-8443}:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - ./api-keys.json:/etc/caddy/api-keys.json
      - caddy_data:/data
      - caddy_config:/config
    environment:
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      - app
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:
  zookeeper_data:
  zookeeper_log:
  kafka_data:
  caddy_data:
  caddy_config:
  elastic_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
networks:
  app-network:
    driver: bridge
